#map = affine_map<(d0, d1, d2, d3) -> (d1, d2, d3, d0)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map2 = affine_map<(d0, d1, d2, d3) -> (d3, d0, d1, d2)>
#map3 = affine_map<(d0, d1, d2, d3) -> (d3)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1) -> (d1)>
#map6 = affine_map<(d0, d1) -> (d0)>
module attributes {tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 1482 : i32}} {
  memref.global "private" constant @__constant_5x5x1x1xf32 : memref<5x5x1x1xf32> = dense<[[[[-0.239178866]], [[-0.059307158]], [[0.288950384]], [[0.192838907]], [[-0.283192754]]], [[[0.313829422]], [[-0.313896388]], [[0.070874393]], [[0.316426694]], [[-0.345702201]]], [[[-0.331886679]], [[-0.10094142]], [[-0.193157896]], [[-0.034132719]], [[0.191257656]]], [[[-0.155271932]], [[-0.246177018]], [[0.100440174]], [[-0.321060359]], [[-0.31916821]]], [[[0.106153876]], [[-0.0650999844]], [[0.148521215]], [[0.00141245127]], [[0.283571839]]]]>
  memref.global "private" constant @__constant_1xf32 : memref<1xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_1x256x8xf32 : memref<1x256x8xf32> = dense<"0x
  memref.global "private" constant @__constant_1x8x4xf32 : memref<1x8x4xf32> = dense<[[[-0.553162336, 0.484506547, -0.0500785708, 0.181675315], [0.661634862, -0.267243057, 0.239755571, -0.0333524942], [-0.0952668786, 0.595283091, 0.0143252015, 0.618282735], [0.0734405517, -0.578623474, -0.0334805846, 0.0194116831], [-0.662837744, -0.21215862, -0.333795279, 0.541747868], [0.253724039, -2.615330e-01, 0.115942955, 0.103184581], [0.462623656, 0.391423881, -0.66526252, -0.693425894], [-0.365181863, 0.524228394, 0.668026506, -0.660975337]]]>
  memref.global "private" constant @__constant_1x4x2xf32 : memref<1x4x2xf32> = dense<[[[0.147334099, -0.553795576], [0.135106802, -0.970039606], [0.585191488, -0.218065262], [0.381030798, 0.867018461]]]>
  memref.global "private" constant @__constant_8xf32 : memref<8xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_4xf32 : memref<4xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_2xf32 : memref<2xf32> = dense<0.000000e+00>
  func.func @main(%arg0: memref<4x32x32x1xf32>, %arg1: memref<4x2xf32>) attributes {tf.entry_function = {control_outputs = "", inputs = "x1", outputs = "Identity"}} {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 3.40282347E+38 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %0 = memref.get_global @__constant_2xf32 : memref<2xf32>
    %1 = memref.get_global @__constant_4xf32 : memref<4xf32>
    %2 = memref.get_global @__constant_8xf32 : memref<8xf32>
    %3 = memref.get_global @__constant_1x4x2xf32 : memref<1x4x2xf32>
    %4 = memref.get_global @__constant_1x8x4xf32 : memref<1x8x4xf32>
    %5 = memref.get_global @__constant_1x256x8xf32 : memref<1x256x8xf32>
    %6 = memref.get_global @__constant_1xf32 : memref<1xf32>
    %7 = memref.get_global @__constant_5x5x1x1xf32 : memref<5x5x1x1xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x5x5x1xf32>
    linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%7 : memref<5x5x1x1xf32>) outs(%alloc : memref<1x5x5x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<4x35x35x1xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_2 : memref<4x35x35x1xf32>)
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<4x35x35x1xf32>
    memref.copy %alloc_2, %alloc_3 : memref<4x35x35x1xf32> to memref<4x35x35x1xf32>
    memref.dealloc %alloc_2 : memref<4x35x35x1xf32>
    %subview = memref.subview %alloc_3[0, 1, 1, 0] [4, 32, 32, 1] [1, 1, 1, 1] : memref<4x35x35x1xf32> to memref<4x32x32x1xf32, strided<[1225, 35, 1, 1], offset: 36>>
    memref.copy %arg0, %subview : memref<4x32x32x1xf32> to memref<4x32x32x1xf32, strided<[1225, 35, 1, 1], offset: 36>>
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<5x5x1x1xf32>
    linalg.generic {indexing_maps = [#map2, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc : memref<1x5x5x1xf32>) outs(%alloc_4 : memref<5x5x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    memref.dealloc %alloc : memref<1x5x5x1xf32>
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<4x16x16x1xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_5 : memref<4x16x16x1xf32>)
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<4x16x16x1xf32>
    memref.copy %alloc_5, %alloc_6 : memref<4x16x16x1xf32> to memref<4x16x16x1xf32>
    memref.dealloc %alloc_5 : memref<4x16x16x1xf32>
    linalg.conv_2d_nhwc_hwcf {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%alloc_3, %alloc_4 : memref<4x35x35x1xf32>, memref<5x5x1x1xf32>) outs(%alloc_6 : memref<4x16x16x1xf32>)
    memref.dealloc %alloc_4 : memref<5x5x1x1xf32>
    memref.dealloc %alloc_3 : memref<4x35x35x1xf32>
    %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map3, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%6, %alloc_6 : memref<1xf32>, memref<4x16x16x1xf32>) outs(%alloc_7 : memref<4x16x16x1xf32>) {
    ^bb0(%in: f32, %in_32: f32, %out: f32):
      %8 = arith.addf %in, %in_32 : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_6 : memref<4x16x16x1xf32>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_7 : memref<4x16x16x1xf32>) outs(%alloc_8 : memref<4x16x16x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = arith.minf %in, %cst_0 : f32
      %9 = arith.maxf %8, %cst : f32
      linalg.yield %9 : f32
    }
    memref.dealloc %alloc_7 : memref<4x16x16x1xf32>
    %collapse_shape = memref.collapse_shape %alloc_8 [[0], [1, 2, 3]] : memref<4x16x16x1xf32> into memref<4x256xf32>
    %expand_shape = memref.expand_shape %collapse_shape [[0, 1], [2]] : memref<4x256xf32> into memref<1x4x256xf32>
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x4x8xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_9 : memref<1x4x8xf32>)
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x4x8xf32>
    memref.copy %alloc_9, %alloc_10 : memref<1x4x8xf32> to memref<1x4x8xf32>
    memref.dealloc %alloc_9 : memref<1x4x8xf32>
    linalg.batch_matmul ins(%expand_shape, %5 : memref<1x4x256xf32>, memref<1x256x8xf32>) outs(%alloc_10 : memref<1x4x8xf32>)
    memref.dealloc %alloc_8 : memref<4x16x16x1xf32>
    %collapse_shape_11 = memref.collapse_shape %alloc_10 [[0, 1], [2]] : memref<1x4x8xf32> into memref<4x8xf32>
    %alloc_12 = memref.alloc() {alignment = 64 : i64} : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%collapse_shape_11, %2 : memref<4x8xf32>, memref<8xf32>) outs(%alloc_12 : memref<4x8xf32>) {
    ^bb0(%in: f32, %in_32: f32, %out: f32):
      %8 = arith.addf %in, %in_32 : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_10 : memref<1x4x8xf32>
    %alloc_13 = memref.alloc() {alignment = 64 : i64} : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%alloc_12 : memref<4x8xf32>) outs(%alloc_13 : memref<4x8xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = arith.minf %in, %cst_0 : f32
      %9 = arith.maxf %8, %cst : f32
      linalg.yield %9 : f32
    }
    memref.dealloc %alloc_12 : memref<4x8xf32>
    %expand_shape_14 = memref.expand_shape %alloc_13 [[0, 1], [2]] : memref<4x8xf32> into memref<1x4x8xf32>
    %alloc_15 = memref.alloc() {alignment = 64 : i64} : memref<1x4x4xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_15 : memref<1x4x4xf32>)
    %alloc_16 = memref.alloc() {alignment = 64 : i64} : memref<1x4x4xf32>
    memref.copy %alloc_15, %alloc_16 : memref<1x4x4xf32> to memref<1x4x4xf32>
    memref.dealloc %alloc_15 : memref<1x4x4xf32>
    linalg.batch_matmul ins(%expand_shape_14, %4 : memref<1x4x8xf32>, memref<1x8x4xf32>) outs(%alloc_16 : memref<1x4x4xf32>)
    memref.dealloc %alloc_13 : memref<4x8xf32>
    %collapse_shape_17 = memref.collapse_shape %alloc_16 [[0, 1], [2]] : memref<1x4x4xf32> into memref<4x4xf32>
    %alloc_18 = memref.alloc() {alignment = 64 : i64} : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%collapse_shape_17, %1 : memref<4x4xf32>, memref<4xf32>) outs(%alloc_18 : memref<4x4xf32>) {
    ^bb0(%in: f32, %in_32: f32, %out: f32):
      %8 = arith.addf %in, %in_32 : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_16 : memref<1x4x4xf32>
    %alloc_19 = memref.alloc() {alignment = 64 : i64} : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%alloc_18 : memref<4x4xf32>) outs(%alloc_19 : memref<4x4xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = arith.minf %in, %cst_0 : f32
      %9 = arith.maxf %8, %cst : f32
      linalg.yield %9 : f32
    }
    memref.dealloc %alloc_18 : memref<4x4xf32>
    %expand_shape_20 = memref.expand_shape %alloc_19 [[0, 1], [2]] : memref<4x4xf32> into memref<1x4x4xf32>
    %alloc_21 = memref.alloc() {alignment = 64 : i64} : memref<1x4x2xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_21 : memref<1x4x2xf32>)
    %alloc_22 = memref.alloc() {alignment = 64 : i64} : memref<1x4x2xf32>
    memref.copy %alloc_21, %alloc_22 : memref<1x4x2xf32> to memref<1x4x2xf32>
    memref.dealloc %alloc_21 : memref<1x4x2xf32>
    linalg.batch_matmul ins(%expand_shape_20, %3 : memref<1x4x4xf32>, memref<1x4x2xf32>) outs(%alloc_22 : memref<1x4x2xf32>)
    memref.dealloc %alloc_19 : memref<4x4xf32>
    %collapse_shape_23 = memref.collapse_shape %alloc_22 [[0, 1], [2]] : memref<1x4x2xf32> into memref<4x2xf32>
    %alloc_24 = memref.alloc() {alignment = 64 : i64} : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%collapse_shape_23, %0 : memref<4x2xf32>, memref<2xf32>) outs(%alloc_24 : memref<4x2xf32>) {
    ^bb0(%in: f32, %in_32: f32, %out: f32):
      %8 = arith.addf %in, %in_32 : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_22 : memref<1x4x2xf32>
    %alloc_25 = memref.alloc() {alignment = 64 : i64} : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%alloc_24 : memref<4x2xf32>) outs(%alloc_25 : memref<4x2xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = math.exp %in : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_24 : memref<4x2xf32>
    %alloc_26 = memref.alloc() {alignment = 64 : i64} : memref<4xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_26 : memref<4xf32>)
    %alloc_27 = memref.alloc() {alignment = 64 : i64} : memref<4xf32>
    memref.copy %alloc_26, %alloc_27 : memref<4xf32> to memref<4xf32>
    memref.dealloc %alloc_26 : memref<4xf32>
    linalg.generic {indexing_maps = [#map4, #map6], iterator_types = ["parallel", "reduction"]} ins(%alloc_25 : memref<4x2xf32>) outs(%alloc_27 : memref<4xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = arith.addf %in, %out : f32
      linalg.yield %8 : f32
    }
    %expand_shape_28 = memref.expand_shape %alloc_27 [[0, 1]] : memref<4xf32> into memref<4x1xf32>
    %alloc_29 = memref.alloc() {alignment = 64 : i64} : memref<4x1xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%expand_shape_28 : memref<4x1xf32>) outs(%alloc_29 : memref<4x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %8 = arith.divf %cst_1, %in : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_27 : memref<4xf32>
    %collapse_shape_30 = memref.collapse_shape %alloc_29 [[0, 1]] : memref<4x1xf32> into memref<4xf32>
    %alloc_31 = memref.alloc() {alignment = 64 : i64} : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map6, #map4], iterator_types = ["parallel", "parallel"]} ins(%alloc_25, %collapse_shape_30 : memref<4x2xf32>, memref<4xf32>) outs(%alloc_31 : memref<4x2xf32>) {
    ^bb0(%in: f32, %in_32: f32, %out: f32):
      %8 = arith.mulf %in, %in_32 : f32
      linalg.yield %8 : f32
    }
    memref.dealloc %alloc_29 : memref<4x1xf32>
    memref.dealloc %alloc_25 : memref<4x2xf32>
    memref.copy %alloc_31, %arg1 : memref<4x2xf32> to memref<4x2xf32>
    return
  }
}

